/*
 * This Java source file was generated by the Gradle 'init' task.
 */
package com.yoon.pms;

import java.io.DataInputStream;
import java.io.DataOutputStream;
import java.net.ServerSocket;
import java.net.Socket;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Set;
import com.yoon.pms.table.BuyerBoardTable;
import com.yoon.pms.table.BuyerCommentTable;
import com.yoon.pms.table.BuyerMemberTable;
import com.yoon.pms.table.DataTable;
import com.yoon.pms.table.LogTable;
import com.yoon.pms.table.MenuTable;
import com.yoon.pms.table.OrderTable;
import com.yoon.pms.table.SellerBoardTable;
import com.yoon.pms.table.SellerCommentTable;
import com.yoon.pms.table.SellerMemberTable;
import com.yoon.util.Request;
import com.yoon.util.Response;

public class ServerApp {
  int port;
  HashMap<String,DataTable> tableMap = new HashMap<>();

  public ServerApp(int port) {
    this.port = port;
  }

  public static void main(String[] args) {
    ServerApp app = new ServerApp(8888);
    app.service();

  }

  public void service() {

    tableMap.put("buyerMember/", new BuyerMemberTable());
    tableMap.put("sellerMember/", new SellerMemberTable());
    tableMap.put("buyerBoard/", new BuyerBoardTable());
    tableMap.put("sellerBoard/", new SellerBoardTable());
    tableMap.put("buyerComment/", new BuyerCommentTable());
    tableMap.put("sellerComment/", new SellerCommentTable());
    tableMap.put("log/", new LogTable());
    tableMap.put("menu/", new MenuTable());
    tableMap.put("order/", new OrderTable());

    try (ServerSocket serverSocket = new ServerSocket(this.port)) {
      System.out.println("서버 실행");

      while(true) {
        Socket socket = serverSocket.accept();

        new Thread(() -> processRequest(socket)).start();
      }
    }
    catch (Exception e) {
      System.out.println("서버 실행 중 오류 발생");
      e.printStackTrace();
    }

  }

  private DataTable findDataTable(String command) {
    Set<String> keySet = tableMap.keySet();
    for (String key : keySet) {
      if (command.startsWith(key)) {
        return tableMap.get(key);
      }
    }
    return null;
  }

  private Request receiveRequest(DataInputStream in) throws Exception {
    Request request = new Request();

    request.setCommand(in.readUTF());
    int length = in.readInt();

    ArrayList<String> data = null;
    if (length > 0) {
      data = new ArrayList<>();
      for (int i = 0; i < length; i++) {
        data.add(in.readUTF());
      }
      request.setDataList(data);
    }
    return request;
  }

  private void sendResponse(DataOutputStream out, String status, String... data) throws Exception {
    out.writeUTF(status);
    out.writeInt(data.length);
    for (int i = 0; i < data.length; i++) {
      out.writeUTF(data[i]);
    }
    out.flush();
  }

  private void log(Request request) {
    System.out.println("============================");
    System.out.printf("명령 : %s\n", request.getCommand());
    List<String> data = request.getDataList();
    System.out.printf("데이터 개수 : %d\n", data == null ? 0 : data.size());
    if (data != null) {
      System.out.println("데이터 : ");
      for (String str : data) {
        System.out.println(str);
      }
    }
  }

  public void processRequest(Socket socket) {
    // 별도의 실행 흐름에서 수행할 작업이 있다면, 이 메소드에 기술한다.
    try (DataInputStream in = new DataInputStream(socket.getInputStream());
        DataOutputStream out = new DataOutputStream(socket.getOutputStream())) {

      while (true) {

        Request request = receiveRequest(in);

        log(request);

        if (request.getCommand().equals("quit")) {
          sendResponse(out, "success");
          break;
        }

        DataTable dataTable = findDataTable(request.getCommand());

        if (dataTable != null) {
          Response response = new Response();
          try {
            dataTable.service(request, response);
            sendResponse(out, "success",
                response.getDataList().toArray(new String[response.getDataList().size()]));
          } catch (Exception e) {
            e.printStackTrace();
            sendResponse(out, "error", e.getMessage());
          }
        } else {
          sendResponse(out, "error", "해당 요청을 처리할 수 없습니다.");
        }
        out.flush();
      }
    }

    catch (Exception e) {
      e.printStackTrace();
    }
  }

}
